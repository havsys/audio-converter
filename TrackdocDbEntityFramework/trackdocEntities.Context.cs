//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrackdocDbEntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class trackdocEntities : DbContext
    {
        public trackdocEntities()
            : base("name=trackdocEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<abstraction_log> abstraction_log { get; set; }
        public virtual DbSet<account> accounts { get; set; }
        public virtual DbSet<accuracy> accuracies { get; set; }
        public virtual DbSet<accuracy_type> accuracy_type { get; set; }
        public virtual DbSet<address> addresses { get; set; }
        public virtual DbSet<address_country> address_country { get; set; }
        public virtual DbSet<address_state> address_state { get; set; }
        public virtual DbSet<admin_log> admin_log { get; set; }
        public virtual DbSet<api_encounter> api_encounter { get; set; }
        public virtual DbSet<api_encounter_status> api_encounter_status { get; set; }
        public virtual DbSet<asp_net_role> asp_net_role { get; set; }
        public virtual DbSet<asp_net_user_claim> asp_net_user_claim { get; set; }
        public virtual DbSet<asp_net_user_login> asp_net_user_login { get; set; }
        public virtual DbSet<asp_net_user_role> asp_net_user_role { get; set; }
        public virtual DbSet<assignment_type> assignment_type { get; set; }
        public virtual DbSet<athena_siu_in> athena_siu_in { get; set; }
        public virtual DbSet<audio> audios { get; set; }
        public virtual DbSet<audio_source> audio_source { get; set; }
        public virtual DbSet<audio_type> audio_type { get; set; }
        public virtual DbSet<billing_info> billing_info { get; set; }
        public virtual DbSet<comment> comments { get; set; }
        public virtual DbSet<contact> contacts { get; set; }
        public virtual DbSet<demographic> demographics { get; set; }
        public virtual DbSet<device> devices { get; set; }
        public virtual DbSet<device_platform> device_platform { get; set; }
        public virtual DbSet<document> documents { get; set; }
        public virtual DbSet<document_type> document_type { get; set; }
        public virtual DbSet<document_version> document_version { get; set; }
        public virtual DbSet<ecw_siu_in> ecw_siu_in { get; set; }
        public virtual DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public virtual DbSet<entity> entities { get; set; }
        public virtual DbSet<entity_level> entity_level { get; set; }
        public virtual DbSet<entity_oauth_authorization> entity_oauth_authorization { get; set; }
        public virtual DbSet<entity_role> entity_role { get; set; }
        public virtual DbSet<entity_setting_detail> entity_setting_detail { get; set; }
        public virtual DbSet<entity_type> entity_type { get; set; }
        public virtual DbSet<event_code> event_code { get; set; }
        public virtual DbSet<event_type> event_type { get; set; }
        public virtual DbSet<fax> faxes { get; set; }
        public virtual DbSet<fax_status> fax_status { get; set; }
        public virtual DbSet<function> functions { get; set; }
        public virtual DbSet<function_type> function_type { get; set; }
        public virtual DbSet<hold_status> hold_status { get; set; }
        public virtual DbSet<interface_section> interface_section { get; set; }
        public virtual DbSet<interface_type> interface_type { get; set; }
        public virtual DbSet<invoice> invoices { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<job_audio> job_audio { get; set; }
        public virtual DbSet<job_comment> job_comment { get; set; }
        public virtual DbSet<job_priority> job_priority { get; set; }
        public virtual DbSet<job_status> job_status { get; set; }
        public virtual DbSet<job_type> job_type { get; set; }
        public virtual DbSet<job_type_interface_section> job_type_interface_section { get; set; }
        public virtual DbSet<job_type_section> job_type_section { get; set; }
        public virtual DbSet<log> logs { get; set; }
        public virtual DbSet<log_priority> log_priority { get; set; }
        public virtual DbSet<medisapien_data_path> medisapien_data_path { get; set; }
        public virtual DbSet<medisapien_job> medisapien_job { get; set; }
        public virtual DbSet<nlp_job> nlp_job { get; set; }
        public virtual DbSet<nlp_status> nlp_status { get; set; }
        public virtual DbSet<normal_text> normal_text { get; set; }
        public virtual DbSet<oauth_client> oauth_client { get; set; }
        public virtual DbSet<oauth_client_accessible_entity> oauth_client_accessible_entity { get; set; }
        public virtual DbSet<oauth_token> oauth_token { get; set; }
        public virtual DbSet<obj> objs { get; set; }
        public virtual DbSet<patient> patients { get; set; }
        public virtual DbSet<permission> permissions { get; set; }
        public virtual DbSet<privilege> privileges { get; set; }
        public virtual DbSet<relationship> relationships { get; set; }
        public virtual DbSet<relationship_role> relationship_role { get; set; }
        public virtual DbSet<relationship_setting_detail> relationship_setting_detail { get; set; }
        public virtual DbSet<relationship_type> relationship_type { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<role_privilege> role_privilege { get; set; }
        public virtual DbSet<setting> settings { get; set; }
        public virtual DbSet<setting_detail> setting_detail { get; set; }
        public virtual DbSet<setting_type> setting_type { get; set; }
        public virtual DbSet<specialty> specialties { get; set; }
        public virtual DbSet<speechrec_job> speechrec_job { get; set; }
        public virtual DbSet<speechrec_status> speechrec_status { get; set; }
        public virtual DbSet<template> templates { get; set; }
        public virtual DbSet<template_type> template_type { get; set; }
        public virtual DbSet<user_signature> user_signature { get; set; }
        public virtual DbSet<user_type> user_type { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<work_assignment> work_assignment { get; set; }
        public virtual DbSet<work_assignment_default> work_assignment_default { get; set; }
        public virtual DbSet<workflow_step> workflow_step { get; set; }
    
        public virtual ObjectResult<string> ELMAH_GetErrorsXml(string application, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorsXml", applicationParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorXml(string application, Nullable<System.Guid> errorId)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorXml", applicationParameter, errorIdParameter);
        }
    
        public virtual int ELMAH_LogError(Nullable<System.Guid> errorId, string application, string host, string type, string source, string message, string user, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELMAH_LogError", errorIdParameter, applicationParameter, hostParameter, typeParameter, sourceParameter, messageParameter, userParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetDescendantEntityIds(Nullable<int> rootId)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("rootId", rootId) :
                new ObjectParameter("rootId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetDescendantEntityIds", rootIdParameter);
        }
    
        public virtual ObjectResult<GetDescendantEntityNamesIds_Result> GetDescendantEntityNamesIds(Nullable<int> rootId, Nullable<bool> descendants)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("rootId", rootId) :
                new ObjectParameter("rootId", typeof(int));
    
            var descendantsParameter = descendants.HasValue ?
                new ObjectParameter("descendants", descendants) :
                new ObjectParameter("descendants", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDescendantEntityNamesIds_Result>("GetDescendantEntityNamesIds", rootIdParameter, descendantsParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_check_td1_rel_id(Nullable<int> tD2RELID)
        {
            var tD2RELIDParameter = tD2RELID.HasValue ?
                new ObjectParameter("TD2RELID", tD2RELID) :
                new ObjectParameter("TD2RELID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_check_td1_rel_id", tD2RELIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_check_teldoc_id(Nullable<int> teldocID)
        {
            var teldocIDParameter = teldocID.HasValue ?
                new ObjectParameter("teldocID", teldocID) :
                new ObjectParameter("teldocID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_check_teldoc_id", teldocIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_check_username(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_check_username", usernameParameter);
        }
    
        public virtual int usp_create_API_job(string filename, string file_extension, byte[] audiofile, Nullable<int> relationship_id, Nullable<int> userid, Nullable<int> external_id, Nullable<int> audio_length, Nullable<int> priority, Nullable<System.DateTime> dOS, Nullable<System.DateTime> dateDictated, Nullable<int> jobtype, string audio_source_name, string bitrate)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var file_extensionParameter = file_extension != null ?
                new ObjectParameter("file_extension", file_extension) :
                new ObjectParameter("file_extension", typeof(string));
    
            var audiofileParameter = audiofile != null ?
                new ObjectParameter("audiofile", audiofile) :
                new ObjectParameter("audiofile", typeof(byte[]));
    
            var relationship_idParameter = relationship_id.HasValue ?
                new ObjectParameter("relationship_id", relationship_id) :
                new ObjectParameter("relationship_id", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var external_idParameter = external_id.HasValue ?
                new ObjectParameter("external_id", external_id) :
                new ObjectParameter("external_id", typeof(int));
    
            var audio_lengthParameter = audio_length.HasValue ?
                new ObjectParameter("audio_length", audio_length) :
                new ObjectParameter("audio_length", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var dateDictatedParameter = dateDictated.HasValue ?
                new ObjectParameter("DateDictated", dateDictated) :
                new ObjectParameter("DateDictated", typeof(System.DateTime));
    
            var jobtypeParameter = jobtype.HasValue ?
                new ObjectParameter("jobtype", jobtype) :
                new ObjectParameter("jobtype", typeof(int));
    
            var audio_source_nameParameter = audio_source_name != null ?
                new ObjectParameter("audio_source_name", audio_source_name) :
                new ObjectParameter("audio_source_name", typeof(string));
    
            var bitrateParameter = bitrate != null ?
                new ObjectParameter("bitrate", bitrate) :
                new ObjectParameter("bitrate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_create_API_job", filenameParameter, file_extensionParameter, audiofileParameter, relationship_idParameter, useridParameter, external_idParameter, audio_lengthParameter, priorityParameter, dOSParameter, dateDictatedParameter, jobtypeParameter, audio_source_nameParameter, bitrateParameter);
        }
    
        public virtual int usp_create_API_job_mobile(string filename, string file_extension, string audiofilepath, Nullable<int> relationship_id, Nullable<int> userid, Nullable<int> audio_length, Nullable<int> priority, Nullable<System.DateTime> dOS, Nullable<System.DateTime> dateDictated, Nullable<int> jobtype, string audio_source_name, string bitrate, string mRN, string firstName, string lastName, Nullable<System.DateTime> dOB, string patient_id, string encounter_id)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var file_extensionParameter = file_extension != null ?
                new ObjectParameter("file_extension", file_extension) :
                new ObjectParameter("file_extension", typeof(string));
    
            var audiofilepathParameter = audiofilepath != null ?
                new ObjectParameter("audiofilepath", audiofilepath) :
                new ObjectParameter("audiofilepath", typeof(string));
    
            var relationship_idParameter = relationship_id.HasValue ?
                new ObjectParameter("relationship_id", relationship_id) :
                new ObjectParameter("relationship_id", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var audio_lengthParameter = audio_length.HasValue ?
                new ObjectParameter("audio_length", audio_length) :
                new ObjectParameter("audio_length", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var dateDictatedParameter = dateDictated.HasValue ?
                new ObjectParameter("DateDictated", dateDictated) :
                new ObjectParameter("DateDictated", typeof(System.DateTime));
    
            var jobtypeParameter = jobtype.HasValue ?
                new ObjectParameter("jobtype", jobtype) :
                new ObjectParameter("jobtype", typeof(int));
    
            var audio_source_nameParameter = audio_source_name != null ?
                new ObjectParameter("audio_source_name", audio_source_name) :
                new ObjectParameter("audio_source_name", typeof(string));
    
            var bitrateParameter = bitrate != null ?
                new ObjectParameter("bitrate", bitrate) :
                new ObjectParameter("bitrate", typeof(string));
    
            var mRNParameter = mRN != null ?
                new ObjectParameter("MRN", mRN) :
                new ObjectParameter("MRN", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var patient_idParameter = patient_id != null ?
                new ObjectParameter("patient_id", patient_id) :
                new ObjectParameter("patient_id", typeof(string));
    
            var encounter_idParameter = encounter_id != null ?
                new ObjectParameter("encounter_id", encounter_id) :
                new ObjectParameter("encounter_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_create_API_job_mobile", filenameParameter, file_extensionParameter, audiofilepathParameter, relationship_idParameter, useridParameter, audio_lengthParameter, priorityParameter, dOSParameter, dateDictatedParameter, jobtypeParameter, audio_source_nameParameter, bitrateParameter, mRNParameter, firstNameParameter, lastNameParameter, dOBParameter, patient_idParameter, encounter_idParameter);
        }
    
        public virtual int usp_create_API_job_new(string filename, string file_extension, string audiofilepath, Nullable<int> relationship_id, Nullable<int> userid, Nullable<int> external_id, Nullable<int> audio_length, Nullable<int> priority, Nullable<System.DateTime> dOS, Nullable<System.DateTime> dateDictated, Nullable<int> jobtype, string audio_source_name, string bitrate)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var file_extensionParameter = file_extension != null ?
                new ObjectParameter("file_extension", file_extension) :
                new ObjectParameter("file_extension", typeof(string));
    
            var audiofilepathParameter = audiofilepath != null ?
                new ObjectParameter("audiofilepath", audiofilepath) :
                new ObjectParameter("audiofilepath", typeof(string));
    
            var relationship_idParameter = relationship_id.HasValue ?
                new ObjectParameter("relationship_id", relationship_id) :
                new ObjectParameter("relationship_id", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var external_idParameter = external_id.HasValue ?
                new ObjectParameter("external_id", external_id) :
                new ObjectParameter("external_id", typeof(int));
    
            var audio_lengthParameter = audio_length.HasValue ?
                new ObjectParameter("audio_length", audio_length) :
                new ObjectParameter("audio_length", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var dateDictatedParameter = dateDictated.HasValue ?
                new ObjectParameter("DateDictated", dateDictated) :
                new ObjectParameter("DateDictated", typeof(System.DateTime));
    
            var jobtypeParameter = jobtype.HasValue ?
                new ObjectParameter("jobtype", jobtype) :
                new ObjectParameter("jobtype", typeof(int));
    
            var audio_source_nameParameter = audio_source_name != null ?
                new ObjectParameter("audio_source_name", audio_source_name) :
                new ObjectParameter("audio_source_name", typeof(string));
    
            var bitrateParameter = bitrate != null ?
                new ObjectParameter("bitrate", bitrate) :
                new ObjectParameter("bitrate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_create_API_job_new", filenameParameter, file_extensionParameter, audiofilepathParameter, relationship_idParameter, useridParameter, external_idParameter, audio_lengthParameter, priorityParameter, dOSParameter, dateDictatedParameter, jobtypeParameter, audio_source_nameParameter, bitrateParameter);
        }
    
        public virtual int usp_create_SEE_audio_job(string filename, byte[] audiofile, string username, Nullable<int> see_job_id, Nullable<int> audio_length, Nullable<int> priority, Nullable<System.DateTime> dOS, Nullable<System.DateTime> dateDictated, Nullable<int> jobtype)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var audiofileParameter = audiofile != null ?
                new ObjectParameter("audiofile", audiofile) :
                new ObjectParameter("audiofile", typeof(byte[]));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var see_job_idParameter = see_job_id.HasValue ?
                new ObjectParameter("see_job_id", see_job_id) :
                new ObjectParameter("see_job_id", typeof(int));
    
            var audio_lengthParameter = audio_length.HasValue ?
                new ObjectParameter("audio_length", audio_length) :
                new ObjectParameter("audio_length", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var dateDictatedParameter = dateDictated.HasValue ?
                new ObjectParameter("DateDictated", dateDictated) :
                new ObjectParameter("DateDictated", typeof(System.DateTime));
    
            var jobtypeParameter = jobtype.HasValue ?
                new ObjectParameter("jobtype", jobtype) :
                new ObjectParameter("jobtype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_create_SEE_audio_job", filenameParameter, audiofileParameter, usernameParameter, see_job_idParameter, audio_lengthParameter, priorityParameter, dOSParameter, dateDictatedParameter, jobtypeParameter);
        }
    
        public virtual int usp_create_td1uploader_job(string filename, byte[] audiofile, Nullable<int> tD2RELID, Nullable<int> see_job_id, Nullable<int> audio_length, Nullable<int> priority, Nullable<System.DateTime> dOS, Nullable<System.DateTime> dateDictated, Nullable<int> jobtype)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var audiofileParameter = audiofile != null ?
                new ObjectParameter("audiofile", audiofile) :
                new ObjectParameter("audiofile", typeof(byte[]));
    
            var tD2RELIDParameter = tD2RELID.HasValue ?
                new ObjectParameter("TD2RELID", tD2RELID) :
                new ObjectParameter("TD2RELID", typeof(int));
    
            var see_job_idParameter = see_job_id.HasValue ?
                new ObjectParameter("see_job_id", see_job_id) :
                new ObjectParameter("see_job_id", typeof(int));
    
            var audio_lengthParameter = audio_length.HasValue ?
                new ObjectParameter("audio_length", audio_length) :
                new ObjectParameter("audio_length", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var dateDictatedParameter = dateDictated.HasValue ?
                new ObjectParameter("DateDictated", dateDictated) :
                new ObjectParameter("DateDictated", typeof(System.DateTime));
    
            var jobtypeParameter = jobtype.HasValue ?
                new ObjectParameter("jobtype", jobtype) :
                new ObjectParameter("jobtype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_create_td1uploader_job", filenameParameter, audiofileParameter, tD2RELIDParameter, see_job_idParameter, audio_lengthParameter, priorityParameter, dOSParameter, dateDictatedParameter, jobtypeParameter);
        }
    
        public virtual int usp_create_TD2_teldoc_audio_job(string filename, Nullable<int> teldocID, Nullable<int> teldoc_job_id, Nullable<int> audio_length, Nullable<int> priority, Nullable<System.DateTime> dOS, Nullable<System.DateTime> dateDictated, Nullable<int> jobtype, string mRN)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var teldocIDParameter = teldocID.HasValue ?
                new ObjectParameter("teldocID", teldocID) :
                new ObjectParameter("teldocID", typeof(int));
    
            var teldoc_job_idParameter = teldoc_job_id.HasValue ?
                new ObjectParameter("teldoc_job_id", teldoc_job_id) :
                new ObjectParameter("teldoc_job_id", typeof(int));
    
            var audio_lengthParameter = audio_length.HasValue ?
                new ObjectParameter("audio_length", audio_length) :
                new ObjectParameter("audio_length", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var dateDictatedParameter = dateDictated.HasValue ?
                new ObjectParameter("DateDictated", dateDictated) :
                new ObjectParameter("DateDictated", typeof(System.DateTime));
    
            var jobtypeParameter = jobtype.HasValue ?
                new ObjectParameter("jobtype", jobtype) :
                new ObjectParameter("jobtype", typeof(int));
    
            var mRNParameter = mRN != null ?
                new ObjectParameter("MRN", mRN) :
                new ObjectParameter("MRN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_create_TD2_teldoc_audio_job", filenameParameter, teldocIDParameter, teldoc_job_idParameter, audio_lengthParameter, priorityParameter, dOSParameter, dateDictatedParameter, jobtypeParameter, mRNParameter);
        }
    
        public virtual int usp_create_teldoc_audio_job(string filename, byte[] audiofile, Nullable<int> teldocID, Nullable<int> teldoc_job_id, Nullable<int> audio_length, Nullable<int> priority, Nullable<System.DateTime> dOS, Nullable<System.DateTime> dateDictated, Nullable<int> jobtype, string mRN)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var audiofileParameter = audiofile != null ?
                new ObjectParameter("audiofile", audiofile) :
                new ObjectParameter("audiofile", typeof(byte[]));
    
            var teldocIDParameter = teldocID.HasValue ?
                new ObjectParameter("teldocID", teldocID) :
                new ObjectParameter("teldocID", typeof(int));
    
            var teldoc_job_idParameter = teldoc_job_id.HasValue ?
                new ObjectParameter("teldoc_job_id", teldoc_job_id) :
                new ObjectParameter("teldoc_job_id", typeof(int));
    
            var audio_lengthParameter = audio_length.HasValue ?
                new ObjectParameter("audio_length", audio_length) :
                new ObjectParameter("audio_length", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var dateDictatedParameter = dateDictated.HasValue ?
                new ObjectParameter("DateDictated", dateDictated) :
                new ObjectParameter("DateDictated", typeof(System.DateTime));
    
            var jobtypeParameter = jobtype.HasValue ?
                new ObjectParameter("jobtype", jobtype) :
                new ObjectParameter("jobtype", typeof(int));
    
            var mRNParameter = mRN != null ?
                new ObjectParameter("MRN", mRN) :
                new ObjectParameter("MRN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_create_teldoc_audio_job", filenameParameter, audiofileParameter, teldocIDParameter, teldoc_job_idParameter, audio_lengthParameter, priorityParameter, dOSParameter, dateDictatedParameter, jobtypeParameter, mRNParameter);
        }
    
        public virtual ObjectResult<usp_get_audio_info_Result> usp_get_audio_info(Nullable<int> audioid)
        {
            var audioidParameter = audioid.HasValue ?
                new ObjectParameter("audioid", audioid) :
                new ObjectParameter("audioid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_get_audio_info_Result>("usp_get_audio_info", audioidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_get_converting_jobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_get_converting_jobs");
        }
    
        public virtual int usp_update_audio_and_job(Nullable<int> audioid, byte[] audio_lob, string audio_type, string bitrate)
        {
            var audioidParameter = audioid.HasValue ?
                new ObjectParameter("audioid", audioid) :
                new ObjectParameter("audioid", typeof(int));
    
            var audio_lobParameter = audio_lob != null ?
                new ObjectParameter("audio_lob", audio_lob) :
                new ObjectParameter("audio_lob", typeof(byte[]));
    
            var audio_typeParameter = audio_type != null ?
                new ObjectParameter("audio_type", audio_type) :
                new ObjectParameter("audio_type", typeof(string));
    
            var bitrateParameter = bitrate != null ?
                new ObjectParameter("bitrate", bitrate) :
                new ObjectParameter("bitrate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_audio_and_job", audioidParameter, audio_lobParameter, audio_typeParameter, bitrateParameter);
        }
    
        public virtual int usp_update_audio_and_job_new(Nullable<int> audioid, string audio_type, string bitrate, string audiofilepath, string filename, Nullable<int> length)
        {
            var audioidParameter = audioid.HasValue ?
                new ObjectParameter("audioid", audioid) :
                new ObjectParameter("audioid", typeof(int));
    
            var audio_typeParameter = audio_type != null ?
                new ObjectParameter("audio_type", audio_type) :
                new ObjectParameter("audio_type", typeof(string));
    
            var bitrateParameter = bitrate != null ?
                new ObjectParameter("bitrate", bitrate) :
                new ObjectParameter("bitrate", typeof(string));
    
            var audiofilepathParameter = audiofilepath != null ?
                new ObjectParameter("audiofilepath", audiofilepath) :
                new ObjectParameter("audiofilepath", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("length", length) :
                new ObjectParameter("length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_audio_and_job_new", audioidParameter, audio_typeParameter, bitrateParameter, audiofilepathParameter, filenameParameter, lengthParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_import_TD1_contacts(Nullable<int> td_fid)
        {
            var td_fidParameter = td_fid.HasValue ?
                new ObjectParameter("td_fid", td_fid) :
                new ObjectParameter("td_fid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_import_TD1_contacts", td_fidParameter);
        }
    
        public virtual int usp_import_trackdoc_job(Nullable<int> td_aid, Nullable<int> td_jid, Nullable<int> td_fid, Nullable<int> td_tid, Nullable<int> td_eid, string td_status, string td_stat, Nullable<System.DateTime> td_DOS, Nullable<System.DateTime> td_DOD, string td_jTy, string td_pID, string td_pSSN, string td_pLast, string td_pFirst, Nullable<System.DateTime> td_toZyDoc, Nullable<int> td_audio_number, string td_audio_filename, byte[] td_audio_lob, string td_audioTy, string td_audioLen, Nullable<int> td_textLen, Nullable<System.DateTime> td_toTypist, Nullable<System.DateTime> td_fromTypist, string td_textv2_filename, byte[] td_textv2_lob, string td_textv2_text, Nullable<System.DateTime> td_toEditor, Nullable<System.DateTime> td_fromEditor, string td_textv3_filename, byte[] td_textv3_lob, string td_textv3_text, Nullable<System.DateTime> td_toAuthor, string td_textv6_filename, byte[] td_textv6_lob, string td_textv6_text, Nullable<System.DateTime> td_signedAt, string td_textv7_filename, byte[] td_textv7_lob, string td_textv7_text)
        {
            var td_aidParameter = td_aid.HasValue ?
                new ObjectParameter("td_aid", td_aid) :
                new ObjectParameter("td_aid", typeof(int));
    
            var td_jidParameter = td_jid.HasValue ?
                new ObjectParameter("td_jid", td_jid) :
                new ObjectParameter("td_jid", typeof(int));
    
            var td_fidParameter = td_fid.HasValue ?
                new ObjectParameter("td_fid", td_fid) :
                new ObjectParameter("td_fid", typeof(int));
    
            var td_tidParameter = td_tid.HasValue ?
                new ObjectParameter("td_tid", td_tid) :
                new ObjectParameter("td_tid", typeof(int));
    
            var td_eidParameter = td_eid.HasValue ?
                new ObjectParameter("td_eid", td_eid) :
                new ObjectParameter("td_eid", typeof(int));
    
            var td_statusParameter = td_status != null ?
                new ObjectParameter("td_status", td_status) :
                new ObjectParameter("td_status", typeof(string));
    
            var td_statParameter = td_stat != null ?
                new ObjectParameter("td_stat", td_stat) :
                new ObjectParameter("td_stat", typeof(string));
    
            var td_DOSParameter = td_DOS.HasValue ?
                new ObjectParameter("td_DOS", td_DOS) :
                new ObjectParameter("td_DOS", typeof(System.DateTime));
    
            var td_DODParameter = td_DOD.HasValue ?
                new ObjectParameter("td_DOD", td_DOD) :
                new ObjectParameter("td_DOD", typeof(System.DateTime));
    
            var td_jTyParameter = td_jTy != null ?
                new ObjectParameter("td_jTy", td_jTy) :
                new ObjectParameter("td_jTy", typeof(string));
    
            var td_pIDParameter = td_pID != null ?
                new ObjectParameter("td_pID", td_pID) :
                new ObjectParameter("td_pID", typeof(string));
    
            var td_pSSNParameter = td_pSSN != null ?
                new ObjectParameter("td_pSSN", td_pSSN) :
                new ObjectParameter("td_pSSN", typeof(string));
    
            var td_pLastParameter = td_pLast != null ?
                new ObjectParameter("td_pLast", td_pLast) :
                new ObjectParameter("td_pLast", typeof(string));
    
            var td_pFirstParameter = td_pFirst != null ?
                new ObjectParameter("td_pFirst", td_pFirst) :
                new ObjectParameter("td_pFirst", typeof(string));
    
            var td_toZyDocParameter = td_toZyDoc.HasValue ?
                new ObjectParameter("td_toZyDoc", td_toZyDoc) :
                new ObjectParameter("td_toZyDoc", typeof(System.DateTime));
    
            var td_audio_numberParameter = td_audio_number.HasValue ?
                new ObjectParameter("td_audio_number", td_audio_number) :
                new ObjectParameter("td_audio_number", typeof(int));
    
            var td_audio_filenameParameter = td_audio_filename != null ?
                new ObjectParameter("td_audio_filename", td_audio_filename) :
                new ObjectParameter("td_audio_filename", typeof(string));
    
            var td_audio_lobParameter = td_audio_lob != null ?
                new ObjectParameter("td_audio_lob", td_audio_lob) :
                new ObjectParameter("td_audio_lob", typeof(byte[]));
    
            var td_audioTyParameter = td_audioTy != null ?
                new ObjectParameter("td_audioTy", td_audioTy) :
                new ObjectParameter("td_audioTy", typeof(string));
    
            var td_audioLenParameter = td_audioLen != null ?
                new ObjectParameter("td_audioLen", td_audioLen) :
                new ObjectParameter("td_audioLen", typeof(string));
    
            var td_textLenParameter = td_textLen.HasValue ?
                new ObjectParameter("td_textLen", td_textLen) :
                new ObjectParameter("td_textLen", typeof(int));
    
            var td_toTypistParameter = td_toTypist.HasValue ?
                new ObjectParameter("td_toTypist", td_toTypist) :
                new ObjectParameter("td_toTypist", typeof(System.DateTime));
    
            var td_fromTypistParameter = td_fromTypist.HasValue ?
                new ObjectParameter("td_fromTypist", td_fromTypist) :
                new ObjectParameter("td_fromTypist", typeof(System.DateTime));
    
            var td_textv2_filenameParameter = td_textv2_filename != null ?
                new ObjectParameter("td_textv2_filename", td_textv2_filename) :
                new ObjectParameter("td_textv2_filename", typeof(string));
    
            var td_textv2_lobParameter = td_textv2_lob != null ?
                new ObjectParameter("td_textv2_lob", td_textv2_lob) :
                new ObjectParameter("td_textv2_lob", typeof(byte[]));
    
            var td_textv2_textParameter = td_textv2_text != null ?
                new ObjectParameter("td_textv2_text", td_textv2_text) :
                new ObjectParameter("td_textv2_text", typeof(string));
    
            var td_toEditorParameter = td_toEditor.HasValue ?
                new ObjectParameter("td_toEditor", td_toEditor) :
                new ObjectParameter("td_toEditor", typeof(System.DateTime));
    
            var td_fromEditorParameter = td_fromEditor.HasValue ?
                new ObjectParameter("td_fromEditor", td_fromEditor) :
                new ObjectParameter("td_fromEditor", typeof(System.DateTime));
    
            var td_textv3_filenameParameter = td_textv3_filename != null ?
                new ObjectParameter("td_textv3_filename", td_textv3_filename) :
                new ObjectParameter("td_textv3_filename", typeof(string));
    
            var td_textv3_lobParameter = td_textv3_lob != null ?
                new ObjectParameter("td_textv3_lob", td_textv3_lob) :
                new ObjectParameter("td_textv3_lob", typeof(byte[]));
    
            var td_textv3_textParameter = td_textv3_text != null ?
                new ObjectParameter("td_textv3_text", td_textv3_text) :
                new ObjectParameter("td_textv3_text", typeof(string));
    
            var td_toAuthorParameter = td_toAuthor.HasValue ?
                new ObjectParameter("td_toAuthor", td_toAuthor) :
                new ObjectParameter("td_toAuthor", typeof(System.DateTime));
    
            var td_textv6_filenameParameter = td_textv6_filename != null ?
                new ObjectParameter("td_textv6_filename", td_textv6_filename) :
                new ObjectParameter("td_textv6_filename", typeof(string));
    
            var td_textv6_lobParameter = td_textv6_lob != null ?
                new ObjectParameter("td_textv6_lob", td_textv6_lob) :
                new ObjectParameter("td_textv6_lob", typeof(byte[]));
    
            var td_textv6_textParameter = td_textv6_text != null ?
                new ObjectParameter("td_textv6_text", td_textv6_text) :
                new ObjectParameter("td_textv6_text", typeof(string));
    
            var td_signedAtParameter = td_signedAt.HasValue ?
                new ObjectParameter("td_signedAt", td_signedAt) :
                new ObjectParameter("td_signedAt", typeof(System.DateTime));
    
            var td_textv7_filenameParameter = td_textv7_filename != null ?
                new ObjectParameter("td_textv7_filename", td_textv7_filename) :
                new ObjectParameter("td_textv7_filename", typeof(string));
    
            var td_textv7_lobParameter = td_textv7_lob != null ?
                new ObjectParameter("td_textv7_lob", td_textv7_lob) :
                new ObjectParameter("td_textv7_lob", typeof(byte[]));
    
            var td_textv7_textParameter = td_textv7_text != null ?
                new ObjectParameter("td_textv7_text", td_textv7_text) :
                new ObjectParameter("td_textv7_text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_import_trackdoc_job", td_aidParameter, td_jidParameter, td_fidParameter, td_tidParameter, td_eidParameter, td_statusParameter, td_statParameter, td_DOSParameter, td_DODParameter, td_jTyParameter, td_pIDParameter, td_pSSNParameter, td_pLastParameter, td_pFirstParameter, td_toZyDocParameter, td_audio_numberParameter, td_audio_filenameParameter, td_audio_lobParameter, td_audioTyParameter, td_audioLenParameter, td_textLenParameter, td_toTypistParameter, td_fromTypistParameter, td_textv2_filenameParameter, td_textv2_lobParameter, td_textv2_textParameter, td_toEditorParameter, td_fromEditorParameter, td_textv3_filenameParameter, td_textv3_lobParameter, td_textv3_textParameter, td_toAuthorParameter, td_textv6_filenameParameter, td_textv6_lobParameter, td_textv6_textParameter, td_signedAtParameter, td_textv7_filenameParameter, td_textv7_lobParameter, td_textv7_textParameter);
        }
    }
}
